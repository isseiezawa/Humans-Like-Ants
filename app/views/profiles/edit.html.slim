.container.mt-3
  .row
    .col-md-10.offset-md-1
      h1.text-center.mt-3.mb-3
        span
          = t('.title')
      .container
        .shadow.p-3.mb-5.bg-body.rounded
          == render 'shared/description_modal'
          = form_with model: @user, url: profile_path, data: { controller: 'validate', validate_character_count_value: 50, validate_form_type_value: 'userEdit', action: 'input->validate#submitButtonChange' }, class: 'row text-center justify-content-center' do |form|
            == render 'shared/error_messages', object: form.object
            .mb-3.col-8
              i.fa-solid.fa-user-pen.me-1
              = form.label :name, class: 'form-label me-1'
              == render 'shared/info_button'
              .small.text-danger data-validate-target='inputError'
              = form.text_field :name, data: { validate_target: 'input', action: 'input->validate#validateDefault' }, class: 'form-control'
              .small data-validate-target='inputLength'
            .mb-3.col-8
              i.fa-solid.fa-at.me-1
              = form.label :email, class: 'form-label'
              .small.text-danger  data-validate-target='emailError'
              = form.email_field :email, data: { validate_target: 'email', action: 'input->validate#validateEmail' }, class: 'form-control'
            .mb-3.col-8
              i.fa-solid.fa-person-half-dress.me-1
              = form.label :gender, class: 'form-label'
              = form.select :gender, User.genders_i18n.invert.map{|key, value| [key, value]}, {}, {class: 'form-control text-center'}
            .mb-3.col-8
              i.fa-brands.fa-twitter.me-1.text-info
              = form.label :twitter_id, class: 'form-label'
              .input-group
                span.input-group-text @
                = form.text_field :twitter_id, data: { validate_target: 'twitterId', action: 'input->validate#validateTwitterId' }, class: 'form-control'
              .small data-validate-target='twitterIdLength'
            .mb-3.col-8
              i.fa-solid.fa-pen-to-square.me-1
              = form.label :self_introduction, class: 'form-label me-1'
              == render 'shared/info_button'
              .small.text-danger data-validate-target='selfIntroductionError'
              = form.text_area :self_introduction, size: "1x5", data: { validate_target: 'selfIntroduction', action: 'input->validate#validateSelfIntroduction' }, class: 'form-control'
              .small data-validate-target='selfIntroductionLength'
            .mb-3.col-8
              i.fa-solid.fa-bugs.me-1
              = form.label :avatar, class: 'form-label me-1'
              == render 'shared/info_button'
              - if @user.avatar.attached?
                .bg-success.text-white.small
                  = t('.have_avatar')
              - else
                .bg-info.small
                  = t('.no_avatar')
            .mb-3.col-8
              = form.file_field :avatar, accept: '.gltf', class: 'form-control'
            .mb-3.col-8
              i.fa-solid.fa-tags.me-1
              span
                = AvatarTag.model_name.human
              #avatar-tags-list.d-flex.flex-column
                = form.collection_check_boxes(:avatar_tag_ids, @user.avatar_tags, :id, :name) do |avatar_tag|
                  = avatar_tag.label { avatar_tag.check_box + avatar_tag.text }
              = content_tag :div, '', data: { controller: 'avatar-tags-form' } do
                .input-group
                  = text_field_tag nil, nil, data: { avatar_tags_form_target: 'inputAvatarTag', action: 'input->avatar-tags-form#searchAvatarTags' }, class: 'form-control'
                  = link_to 'add', 'javascript:void(0)', data: { action: 'click->avatar-tags-form#addAvatarTag' }, class: 'btn btn-outline-secondary'
                .small.my-1
                  = t('.search_tags')
                #select-tag
            .mb-3.col-8
              = form.submit t('defaults.register'), data: { validate_target: 'submitButton' }, class: 'btn btn-success mt-2 w-25'
